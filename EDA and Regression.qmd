### EDA

```{r load-libraries, message=FALSE}
library(tidyverse)
library(tidymodels)
library(zoo)
library(knitr)
library(mice)
library(kableExtra)
```

```{r data-cleaning}
loans = read.csv("loans_full_schema.csv")

# Set variable types
loans <- loans |> 
  mutate(state = factor(state),
         homeownership = factor(homeownership),
         verified_income = factor(verified_income),
         verification_income_joint = factor(na_if(verification_income_joint, 
                                                  "")), 
         months_since_last_delinq = replace_na(months_since_last_delinq, 0),
         months_since_90d_late = replace_na(months_since_90d_late, 0),
         months_since_last_credit_inquiry = replace_na(months_since_last_credit_inquiry, 0),
         loan_purpose = factor(loan_purpose),
         application_type = factor(application_type),
         grade = factor(grade),
         sub_grade = factor(sub_grade),
         issue_month = as.yearmon(issue_month, format = "%b-%Y"),
         loan_status = factor(loan_status),
         initial_listing_status = factor(initial_listing_status),
         disbursement_method = factor(disbursement_method))

# Get annual income & verification for individual & joint accounts
# If verification is NA for joint, use individual verification
loans <- loans |> 
  mutate(income_final = ifelse(application_type == "individual", 
                               annual_income, annual_income_joint),
         verification_final = ifelse(application_type == "individual", 
                                     as.character(verified_income), 
                                     as.character(verification_income_joint)),
         verification_final = ifelse(is.na(verification_final), 
                                     as.character(verified_income), 
                                     verification_final),
         verification_final = factor(verification_final), 
         debt_to_income_final = ifelse(application_type == "individual", 
                                       debt_to_income, debt_to_income_joint)
         )

# Get df with relevant columns
# num_accounts_120d_past_due, num_accounts_30d_past_due had all 0s
# Can't use stuff paid (occured after interest rate was assigned)
loans_filtered <- loans |> 
  select(-c(emp_title, annual_income, verified_income, debt_to_income,
            annual_income_joint, verification_income_joint, 
            debt_to_income_joint, num_accounts_120d_past_due,
            num_accounts_30d_past_due, paid_total, paid_principal, 
            paid_interest, paid_late_fees))

sum(is.na(loans_filtered))

# Find num variables correlated with emp_length
numeric_vars <- loans_filtered[sapply(loans_filtered, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")

# MICE imputation
imputed_emp_length <- mice(loans_filtered[, c("emp_length", 
                                              "num_mort_accounts",
                                              "num_total_cc_accounts",
                                              "earliest_credit_line")], 
                     method = "pmm", m = 5, maxit = 50, seed = 123,
                     printFlag=FALSE)

completed_emp_length <- complete(imputed_emp_length)

# Update emp_length
loans_filtered$emp_length <- completed_emp_length$emp_length
sum(is.na(loans_filtered))
```

```{r debt-income-interest-rate}
ggplot(loans, aes(x = debt_to_income, y = interest_rate, color = grade)) +
  geom_point() +
  labs(x = "Debt to Income Ratio",
       y = "Loan Interest Rate (%)",
       title = "Loan Interest Rate vs. Loanee Debt to Income Ratio",
       subtitle = "By Loan Grade")
```

```{r loan-grade-purposes}
ggplot(loans, aes(x = grade, fill = loan_purpose)) +
  geom_bar(position = "fill") +
  labs(x = "Loan Grade",
       y = "Proportion",
       title = "Distribution of Loan Purposes",
       subtitle = "by Loan Grade")
```

```{r interest-rates-by-grade}
ggplot(loans, aes(x = interest_rate)) +
  geom_histogram(fill = "blue", color = "black") +
  facet_wrap(~ grade, scales = "free_y") +  # Separate panel for each level of A
  labs(title = "Distribution of Loan Interest Rates by Loan Grade", x = "Interest Rate (%)", y = "Count") +
  theme_minimal()
```

```{r warning=FALSE}
ggplot(loans_filtered, aes(x=income_final/1000, y=interest_rate, 
                  color=verification_final)) + 
  geom_point() + 
  geom_smooth(method = "lm", se=FALSE) + 
  labs(title="Interest Rate vs Annual Income by Income Verification",
       x="Annual Income (in $1000s)", 
       y="Interest Rate (%)",
       color="Income Verification") + 
  scale_y_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5)) + 
  theme_minimal()
```

```{r warning=FALSE}
ggplot(loans_filtered, aes(x=issue_month)) +
  geom_histogram(stat="count", bins=3, fill="darkblue") + 
  geom_text(stat = "count", aes(label = after_stat(count)), 
            vjust = -0.5, color = "black", size = 4) +
  labs(title="Distribution of Loans by Issue Month",
       x="Issue Month",
       y="Count") + 
  theme_minimal()
```

### Multivariate Linear Regression

$$
\begin{aligned}
&\text{interest_rate}_i = 6.755 + 0.004 \times \text{debt_to_income}_i - (3.4 \times 10^{-6})\times \text{loan_amount}_i \\
&+0.007 \times \text{term}_i + 3.726 \times (\text{loan_grade}_i = B) + 7.353 \times (\text{loan_grade}_i = C) \\
&+ 12.720 \times (\text{loan_grade}_i = D) + 18.222 \times (\text{loan_grade}_i = E) + 22.502 \times (\text{loan_grade}_i = F) \\
&+ 23.930 \times (\text{loan_grade}_i = G) - 0.003 \times \text{num_satisfactory_accounts}_i \\
&- 0.003 \times \text{account_never_delinq_percent}_i + 0.041 \times \text{public_record_bankrupt}_i + \epsilon_i, \\
&\text{where } \epsilon_i \sim N(0, \sigma_{\epsilon}^2)
\end{aligned}
$$

```{r regression-model, message=FALSE}
lend_model = lm(interest_rate ~ debt_to_income + loan_amount + term + grade + 
                  num_satisfactory_accounts + account_never_delinq_percent +
                  public_record_bankrupt, data = loans)

model_output = tidy(lend_model) 

for(i in 1:nrow(model_output)) {
  if(abs(as.numeric(model_output$p.value[i])) < 0.001) {
    model_output$p.value[i] = "< 0.001"
  } else {
    model_output$p.value[i] = round(as.numeric(model_output$p.value[i]), 3)
  }
}

# customize variables so that there are no raw variable outputs
# model_output <- as.data.frame(model_output)
# 
# row_names = c("")
# 
# rownames(model_output) <- row_names
# 
# model_output <- model_output |> 
#   select(-term)

kbl(model_output,
    col.names = c("Term", "Estimate", "Standard Error", "Statistic", "P-value"),
    booktabs = T) |> 
  kable_styling(latex_options = c("striped", "hold_position"))
```

```{r assess-model-performance}
glance(lend_model)$r.squared
glance(lend_model)$adj.r.squared
```

## Lasso Regression

```{r lasso, message=FALSE}
library(glmnet)
grid <- 10^seq(10, -2, length = 100)

loans_x <- model.matrix(interest_rate~., loans_filtered)[,-1]
loans_y <- loans_filtered$interest_rate

set.seed(123)
train <- sample(1:nrow(loans_x), nrow(loans_x)/2)
test <- (-train)
y.test <- loans_y[test]

lasso.mod <- glmnet(loans_x[train,], loans_y[train], 
                    alpha = 1, lambda = grid)
plot(lasso.mod)
```

```{r cross-validation}
set.seed(123)
cv.out <- cv.glmnet(loans_x[train,], loans_y[train], alpha = 1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso.pred <- predict(lasso.mod, s = bestlam, newx = loans_x[test,])

# Find SST and SSE
sst <- sum((y.test - mean(y.test))^2)
sse <- sum((lasso.pred - y.test)^2)

# Find R-Squared
rsq <- 1 - sse/sst

# Find MSE
mse <- mean((lasso.pred - y.test)^2)

cat("MSE: ", mse, "\n")
cat("R-Squared: ", rsq, "\n")
```

MSE is 0.062.

```{r lasso-final-model}
out <- glmnet(loans_x, loans_y, alpha = 1, lambda = grid)
lasso.coef <- predict(out, type = "coefficients", s = bestlam)
lasso_coef_matrix <- as.matrix(lasso.coef)

lasso_coef_df <- data.frame(Predictor = rownames(lasso_coef_matrix),
                            Coefficient = lasso_coef_matrix[, 1], 
                            row.names = NULL)
lasso_sig_df <- lasso_coef_df[lasso_coef_df$Coefficient != 0, ]
rownames(lasso_sig_df) <- NULL

kbl(lasso_sig_df, digits = 4, booktabs = T) |> 
  kable_styling(latex_options = c("striped", "hold_position"))
```
